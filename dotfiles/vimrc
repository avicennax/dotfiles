set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
" vim status bar
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" syntax error highlighting
Plugin 'w0rp/ale'
" filesystem tree integration
Plugin 'scrooloose/nerdtree'
" quoting made easy
Plugin 'tpope/vim-surround'
" easy commenting
Plugin 'scrooloose/nerdcommenter'
" show git changes in side column
Plugin 'airblade/vim-gitgutter'
" sensible defaults; maybe some redundancy between
" vim-sensible and set statements below.
Plugin 'tpope/vim-sensible'
" repo explorer via in-memory tags
Plugin 'majutsushi/tagbar'
" autocompletion
if has("python3") && (v:version >= 800)
    Plugin 'Shougo/deoplete.nvim'
    " deoplete dependencies
    Plugin 'roxma/nvim-yarp'
    Plugin 'roxma/vim-hug-neovim-rpc'
    " python autocompletion
    Plugin 'zchee/deoplete-jedi'
    " js autocompletion
    Plugin 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }
endif
" fuzzy matching; requires fzf
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
" tab autocompletion
Plugin 'ervandew/supertab'
" go-env tools
Plugin 'fatih/vim-go'
" No distractions mode
Plugin 'junegunn/goyo.vim'
" Kotlin
Plugin 'udalov/kotlin-vim'


" All of your Plugins must be added before the following line
call vundle#end()            " required
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" Basic settings

colorscheme elflord

" Place backup files in an alternate directory so they don't clutter working space
" (Make sure the directory exists; it will try each until one works)
" Not being used while noswapfile is enabled
set directory=$HOME/.backup,$HOME/tmp,$HOME
set backupdir=$HOME/.backup,$HOME/tmp,$HOME

" Visually show TABs and trailing whitespace
set listchars=tab:»\ ,trail:·

" Allows for magic like /* vim: tw=60 ts=2: */, but is a potential security vulnerability
set modeline

" Replace tabs with spaces
set expandtab
set shiftwidth=4
set tabstop=4

" Allows deletion past an append and similar
set backspace=indent,eol,start

" Use syntax highlighting/indentation based on filetype
syntax on
filetype indent plugin on

" Show line numbers in left column
set number
highlight LineNr ctermfg=grey

" Always use UTF-8 encoding
set encoding=utf-8

" Don't generate swp files
set noswapfile

" highlight matches
set hlsearch

" allow buffers to be hidden
set hidden

" no terminal error bells
set noerrorbells

" Increase cmd history length
set history=250

" Set vim undo stack depth
set undolevels=500


"" Environment / Mappings

" Don't write write deleted lines to default register
function! DDWrapper()
    normal! "ddd
endfunction
nnoremap <silent> dd :call DDWrapper()<CR>


let mapleader=","
" Easier buffer spliting
nnoremap <leader>vs :vsp<cr>
nnoremap <leader>hs :sp<cr>
" Clear highlighting
nnoremap <leader>ch :noh<cr>
augroup env
    " Remove trailing whitespace prior to writing file
    autocmd BufWritePre * %s/\s\+$//e
    " Automatically reload vimrc after saving
    autocmd BufWritePost $MYVIMRC source %
augroup END


"" Python file bindings
augroup python
    autocmd BufWritePre *.py :normal gggqG
augroup END


"" ctags

" New tags mapping
nnoremap <leader>l <c-]>
" Break out of tag window (hack)
nnoremap <leader>t <c-t>

" Point l:tags at the repo tags file
function! LoadRepoTags()
    let l:repo_tags = systemlist("git rev-parse --git-dir")[0] . "/tags"
    let &l:tags = l:repo_tags
endfunction
nnoremap <leader>lr :call LoadRepoTags()<cr>


"" Filetype headers
autocmd BufNewfile *.py so $HOME/.vim/headers/python.vim
autocmd BufNewfile *.sh so $HOME/.vim/headers/bash.vim


"" deoplete auto-completion
let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#jedi#show_docstring = 1
call deoplete#custom#option('sources', {'python': ['jedi'], 'javascript': ['tern']})
highlight Pmenu ctermbg=244 ctermfg=15
highlight PmenuSel ctermbg=35 ctermfg=15


"" air-line
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
    let g:airline_powerline_fonts=1
endif
let g:airline_section_warning = ''

"" ALE
let g:ale_linters = {'python': ['flake8'], 'javascript': ['eslint']}
let airline#extensions#ale#error_symbol = "\u2717"
let airline#extensions#ale#warning_symbol = "\u26A0"
let g:ale_sign_error = "\u2717"
let g:ale_sign_warning = "\u26A0"
let g:ale_set_highlights = 0
let g:ale_lint_on_save = 1
let g:ale_lint_on_open = 0
let g:ale_lint_on_text_changed = 0
let g:ale_open_list = 1

nnoremap :ar :ALEReset<cr>
nnoremap :al :ALELint<cr>


"" gitgutter
highlight clear SignColumn
